{"data":{"markdownRemark":{"html":"<p>These are tried and true steps for cleaning up hastily typed commits or squashing multiple commits to make your git log cleaner.</p>\n<ol>\n<li>Run <code>git log</code> to see the list of commits.</li>\n<li>Run <code>git rebase -i HEAD~6</code> and set the number to the number of commits you want to see. 6 for eg, will allow you to edit your 6 most recent commits.</li>\n<li>Refer to the Vim commands cheat sheet: <a href=\"http://vim.rtorr.com/\">http://vim.rtorr.com/</a> for possible operations.</li>\n<li>Move your cursor to the commit you want to move and type <code>dd</code> to cut the line.</li>\n<li>If you want to merge two commits into one, move your cursor to the commit you want to squash it with and press <code>p</code> to insert the line back in.</li>\n<li>Hit <code>i</code> to get into INSERT mode.</li>\n<li>With the cursor in the same line with the commit you want to squash, delete the word <code>pick</code> and replace it with <code>s</code> or <code>squash</code>. Hit ESC to exit the insert mode.</li>\n<li>Hit <code>:wq</code> to write changes and quit.</li>\n<li>It will attempt the rebase then prompt you to select the commit message you want, or write a new one.</li>\n<li>Hit i to insert some text and use # to comment out lines.</li>\n<li>When you're done, hit <code>:wq</code> to save.</li>\n</ol>","excerpt":"These are tried and true steps for cleaning up hastily typed commits or squashing multiple commits to make your git log cleaner. Run  gitâ€¦","frontmatter":{"path":"/articles/git-interactive-rebase","title":"How to do a Git Interactive Rebase","date":"2015-10-06","intro":"Git Interactive rebase is used to cleanup your git history. This is a search phrase that I constantly google despite having done it more often than I can count."}}},"pageContext":{}}